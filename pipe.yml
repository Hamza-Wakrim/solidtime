trigger:
  branches:
    include:
      - main  # Specify the branch to trigger the pipeline

pool:
  vmImage: 'ubuntu-latest'

variables:
  DB_CONNECTION: 'pgsql'
  DB_HOST: 'pg-freelancer.postgres.database.azure.com'
  DB_PORT: '5432'
  DB_DATABASE: 'db_test'
  DB_USERNAME: 'admin_pg_freelancer'
  DB_PASSWORD: 'DI=47]lF_?DY0h13'
  RESOURCE_GROUP: 'freelancer-test'
  POSTGRESQL_SERVER_NAME: 'pg-freelancer'
  LOCATION: 'eastus'
  AZURE_APP_NAME: 'testing-work'  # Replace with your Azure Web App name
  AZURE_SUBSCRIPTION: 'azure-connection'  # Replace with your Azure subscription name

steps:
# Step 1: Install PHP 8.3 and necessary extensions
- script: |
    sudo add-apt-repository ppa:ondrej/php
    sudo apt-get update
    sudo apt-get install -y php8.3 php8.3-cli php8.3-mbstring php8.3-xml php8.3-zip php8.3-intl php8.3-curl php8.3-dom php8.3-pgsql
    php -v
  displayName: 'Install PHP 8.3 and required extensions'

# Step 2: Install Composer dependencies and set up the environment
- script: |
    composer install --no-interaction --no-progress --prefer-dist
    cp .env.example .env
    # Replace placeholders with actual environment variables
    sed -i "s/DB_CONNECTION=.*/DB_CONNECTION=$DB_CONNECTION/" .env
    sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
    sed -i "s/DB_PORT=.*/DB_PORT=$DB_PORT/" .env
    sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_DATABASE/" .env
    sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USERNAME/" .env
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
    php artisan key:generate
  displayName: 'Install dependencies and setup environment'

# Step 3: Copy files to the staging directory
- task: CopyFiles@2
  inputs:
    contents: '**'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy files to staging directory'

# Step 4: Archive the application files
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Archive application files'

# Step 5: Publish the build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
  displayName: 'Publish artifact'

# Step 6: Deploy to Azure Web App (Upload to /home/site/wwwroot/)
- task: AzureWebApp@1
  inputs:
    azureSubscription: '$(AZURE_SUBSCRIPTION)'  # Use the Azure subscription
    appName: '$(AZURE_APP_NAME)'  # Your Azure Web App name
    package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    deploymentMethod: 'zipDeploy'
  displayName: 'Deploy to Azure Web App'

# Step 7: (Optional) Set correct file permissions if needed (Azure might already handle this)
- script: |
    sudo chown -R www-data:www-data /home/site/wwwroot
    sudo chmod -R 755 /home/site/wwwroot
  displayName: 'Set correct file permissions'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))  # Only run if on Linux and the previous steps succeed