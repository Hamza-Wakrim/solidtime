variables:  
  DB_CONNECTION: 'pgsql'  
  DB_HOST: 'pg-freelancer.postgres.database.azure.com'  
  DB_PORT: '5432'  
  DB_DATABASE: 'db_test'  
  DB_USERNAME: 'admin_pg_freelancer'  
  DB_PASSWORD: 'DI=47]lF_?DY0h13'
  RESOURCE_GROUP: 'freelancer-test'
  LOCATION: 'testing-work'

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
# Step 1: Install PHP 8.3 and necessary extensions
- script: |
    sudo add-apt-repository ppa:ondrej/php
    sudo apt-get update
    sudo apt-get install -y php8.3 php8.3-cli php8.3-mbstring php8.3-xml php8.3-zip php8.3-intl php8.3-curl php8.3-dom php8.3-pgsql
    php -v
  displayName: 'Install PHP 8.3 and required extensions'

# Step 2: Install Composer dependencies and set up the environment
- script: |
    composer install --no-interaction --no-progress --prefer-dist
    cp .env.example .env
    # Replace placeholders with actual environment variables
    sed -i "s/DB_CONNECTION=.*/DB_CONNECTION=$DB_CONNECTION/" .env
    sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
    sed -i "s/DB_PORT=.*/DB_PORT=$DB_PORT/" .env
    sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_DATABASE/" .env
    sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USERNAME/" .env
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
    php artisan key:generate
  displayName: 'Install dependencies and setup environment'

# Step 3: Run migrations (If necessary)
- script: |
    php artisan migrate --seed --force
  displayName: 'Run Laravel Migrations'

# Step 4: Copy files to the staging directory
- task: CopyFiles@2
  inputs:
    contents: '**'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy files to staging directory'

# Step 5: Archive the application files
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Archive application files'

# Step 6: Publish the build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
  displayName: 'Publish artifact'
  
# Step 7: Deploy to Azure Web App
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'azure-connection'  # Replace with your Azure subscription name
    appName: 'testing-work'  # Replace with your Azure Web App name
    package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
  displayName: 'Deploy to Azure Web App'
